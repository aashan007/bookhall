let mongoose,bcrypt;_5b7‍.x([["default",()=>_5b7‍.o]]);_5b7‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_5b7‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);

const {Schema} = mongoose

const userSchema = new Schema({
    name: {
        type : String,
        trim:true,
        required:'Name is required'
    },
    email:{
        type : String,
        trim:true,
        required:'Email is required',
        unique: true
    },
    password:{
        type : String,
        trim:true,
        required:'Password is required',
        min: 6,
        max: 64
    },
    stripe_account_id:'',
    stripe_seller:{},
    stripeSession:{}
},
{timestamps:true}
);

//to use middleware during any change in password node
userSchema.pre('save',function(next){
    let user = this

    //hash password register for first time or when user changes it's password

    if(user.isModified('password')){
        return bcrypt.hash(user.password, 12, function(err,hash){
            if(err){
                _5b7‍.g.console.log('BCRYPT has error',err);
                return next(err);
            }
            user.password = hash;
            return next();
        });
    }
    else{
        return next();
    }
});


userSchema.methods.comparePassword = function(password,next){
    bcrypt.compare(password,this.password,function(err,match){
        if(err){
            _5b7‍.g.console.log('COMPARE PASSWORD ERROR',err)
            return next(err,false);
        }
        console.log("Match")
        return next(null,match); //true
        return
    })
}

_5b7‍.d(mongoose.model('User',userSchema));